import tools
import random

class ZobristHash:
    """Zobrist Hash implementation. Actual Zobrist key will be stored
    in each board. The list of keys will be stored in the 
    Transposition Table. The initial hashes will be initialized here.
    [0:64][0:12]: pieces[piece_type]
    [64]: color (black to move)
    [65][0:16]: castling rights
    [66][0:9]: en passant file (last hash represents no ep)
    """
    table = ([[random.getrandbits(64) for _ in range(12)] for _ in range(64)]
                    + [random.getrandbits(64)]
                    + [[random.getrandbits(64) for _ in range(16)]]
                    + [[random.getrandbits(64) for _ in range(9)]])
        
    def __init__(self) -> None:
        self.table = self.initialize_zobrist_table()

    @classmethod
    def initialize_zobrist_table(cls):
        """Generates random 64-bits as hashes for a gamestate."""
        # 64 bits for 12 pieces for 64 squares
        zobrist_table = [[random.getrandbits(64)] * 12 for i in range(64)]
        # 64 bits if black to move
        zobrist_table.extend(random.getrandbits(64))
        # 64 bits for 16 possible combinations of castling rights
        zobrist_table.extend([random.getrandbits(64)] * 16)
        # 64 bits for 8 possible en passant files
        zobrist_table.extend([random.getrandbits(64)] * 8)
        return zobrist_table
    
    @classmethod
    def create_hash_key(cls, board):
        """Returns a Zobrist key given a board. 
        Future keys will be generated by modifying the 
        previous position's key.
        """
        hash_key = 0
        for piece_type in range(12):
            pieces = board.bitboards[piece_type]
            while pieces:
                piece_square = tools.bitscan_lsb(pieces)
                hash_key ^= cls.table[piece_square][piece_type]
                pieces &= pieces - 1
        
        if board.color == 1:
            hash_key ^= cls.table[64]
        
        # Castling rights is stored as 4 bits = 0:15
        hash_key ^= cls.table[65][board.castling_rights]

        # Flag of -1 represents no en passant in position
        hash_key ^= cls.table[66][board.en_passant_flag]
        return hash_key